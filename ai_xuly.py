from flask import Flask
import threading
import os
import paho.mqtt.client as mqtt
import time
import requests

# -------- Flask gi·ªØ app s·ªëng tr√™n Render --------
app = Flask(__name__)

@app.route("/")
def index():
    return "MQTT AI app is alive!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))  # Render s·∫Ω t·ª± g√°n PORT, kh√¥ng ƒë·ªÉ s·ªë c·ªë ƒë·ªãnh
    app.run(host="0.0.0.0", port=port)

# ---------- MQTT ----------
def on_connect(client, userdata, flags, rc):
    print("‚úÖ ƒê√£ k·∫øt n·ªëi MQTT")
    # KH√îNG c·∫ßn subscribe ph/ec n·ªØa
    # client.subscribe("ph")
    # client.subscribe("ec")

def run_mqtt():
    client = mqtt.Client()
    client.username_pw_set("Hieu12345", "Hieu12345")
    client.tls_set()
    client.on_connect = on_connect
    client.connect("0c64bc40bce34474a94c9709a84d047a.s1.eu.hivemq.cloud", 8883)
    client.loop_start()

    # --- L·∫•y EC, pH t·ª´ ThingSpeak ƒë·ªãnh k·ª≥ ---
    THINGSPEAK_URL = "https://api.thingspeak.com/channels/3006092/feeds.json?api_key=6FLQLSHLR9UVUG0N&results=1"

    while True:
        try:
            resp = requests.get(THINGSPEAK_URL, timeout=10)
            feeds = resp.json().get("feeds", [])
            if feeds:
                newest = feeds[0]
                ph = newest.get("field1")
                ec = newest.get("field2")
                try:
                    ph = float(ph)
                    ec = float(ec)
                except:
                    print("L·ªói chuy·ªÉn ƒë·ªïi pH/EC:", ph, ec)
                    time.sleep(15)
                    continue

                goi_y = ""
                # G·ª£i √Ω pH
                if ph < 5.5:
                    goi_y += "pH th·∫•p ‚Üí B√≥n v√¥i. "
                elif ph > 7.5:
                    goi_y += "pH cao ‚Üí Th√™m l∆∞u hu·ª≥nh. "
                else:
                    goi_y += "pH ·ªïn. "

                # G·ª£i √Ω EC
                if ec > 4:
                    goi_y += "EC cao ‚Üí X·∫£ m·∫∑n."
                elif ec < 1:
                    goi_y += "EC th·∫•p ‚Üí B√≥n ph√¢n NPK t·ªïng h·ª£p ho·∫∑c ph√¢n h·ªØu c∆° ƒë·ªÉ tƒÉng dinh d∆∞·ª°ng."
                else:
                    goi_y += "EC ·ªïn."

                print(f"üì© G·ª£i √Ω g·ª≠i ESP32: {goi_y}")
                client.publish("goiy", goi_y)
            else:
                print("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ThingSpeak")
        except Exception as e:
            print("L·ªói khi l·∫•y ThingSpeak ho·∫∑c g·ª≠i MQTT:", e)
        time.sleep(15)  # L·∫∑p l·∫°i m·ªói 15 gi√¢y, c√≥ th·ªÉ ch·ªânh nhanh/ch·∫≠m t√πy √Ω

if __name__ == "__main__":
    # Ch·∫°y Flask ·ªü thread n·ªÅn ƒë·ªÉ Render lu√¥n nh·∫≠n di·ªán app "alive"
    t_web = threading.Thread(target=run_flask)
    t_web.daemon = True
    t_web.start()
    # Ch·∫°y AI g·ª£i √Ω d·ª±a v√†o d·ªØ li·ªáu ThingSpeak
    run_mqtt()
